syntax = "proto3";
package apigateway;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = ".;apigateway";

service ApiGateway {
    rpc AuthenticateUser (AuthenticateUserRequest) returns (AuthenticateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth-user"
            body: "*"
        };
    }

    rpc AddUser (AddUserRequest) returns (AddUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/add-user"
            body: "*"
        };
    }

    rpc AddContent (AddContentRequest) returns (AddContentResponse) {
        option (google.api.http) = {
            post: "/api/v1/add-content"
            body: "*"
        };
    }

    rpc DeleteContent (DeleteContentRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/content/{contentID}"
        };
    }

    rpc SetContentAvailabilityType (SetContentAvailabilityTypeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/set-content-availability-type"
            body: "*"
        };
    }

    rpc GetAuthorContent (GetAuthorContentRequest) returns (GetAuthorContentResponse) {
        option (google.api.http) = {
            post: "/api/v1/content-list/for-author"
            body: "*"
        };
    }

    rpc CreatePlaylist (CreatePlaylistRequest) returns (CreatePlaylistResponse) {
        option (google.api.http) = {
            post: "/api/v1/create-playlist"
            body: "*"
        };
    }

    rpc GetUserPlaylists (GetUserPlaylistsRequest) returns (GetUserPlaylistsResponse) {
        option (google.api.http) = {
            post: "/api/v1/user-playlists"
            body: "*"
        };
    }

    rpc GetPlaylist (GetPlaylistRequest) returns (GetPlaylistResponse) {
        option (google.api.http) = {
            post: "/api/v1/playlist"
            body: "*"
        };
    }

    rpc SetPlaylistName (SetPlaylistNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/playlist/name"
            body: "*"
        };
    }

    rpc AddToPlaylist (AddToPlaylistRequest) returns (AddToPlaylistResponse) {
        option (google.api.http) = {
            post: "/api/v1/playlist/add"
            body: "*"
        };
    }

    rpc RemovePlaylist (RemovePlaylistRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/playlist/{playlistID}"
        };
    }

    rpc RemoveFromPlaylist (RemoveFromPlaylistRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/playlist/item/{playlistItemID}"
        };
    }
}

message AddUserRequest {
    string email = 1;
    string password = 2;
    UserRole role = 3;
}

message AddUserResponse {
    string userId = 1;
}

message AuthenticateUserRequest {
    string email = 1;
    string password = 2;
}

message AuthenticateUserResponse {
    string userID = 1;
}

message AddContentRequest {
    string name = 1;
    ContentType type = 2;
    ContentAvailabilityType availabilityType = 3;
}

message AddContentResponse {
    string contentID = 1;
}

message DeleteContentRequest {
    string contentID = 1;
}

message SetContentAvailabilityTypeRequest {
    string contentID = 1;
    ContentAvailabilityType newContentAvailabilityType = 2;
    string userToken = 3;
}

message GetAuthorContentRequest {
    string userToken = 1;
}

message GetAuthorContentResponse {
    repeated Content contents = 1;
}

message SetPlaylistNameRequest {
    string playlistID = 1;
    string newName = 2;
}

message AddToPlaylistRequest {
    string playlistID = 1;
    string contentID = 2;
}

message AddToPlaylistResponse {
    string playlistItemID = 1;
}

enum ContentType {
    Song = 0;
    Podcast = 1;
}

enum ContentAvailabilityType {
    Public = 0;
    Private = 1;
}

enum UserRole {
    LISTENER = 0;
    CREATOR = 1;
}

message Content {
    string contentID = 1;
    string name = 2;
    string authorID = 3;
    ContentType type = 4;
    ContentAvailabilityType availabilityType = 5;
}

message CreatePlaylistRequest {
    string name = 1;
}

message CreatePlaylistResponse {
    string playlistID = 1;
}

message RemovePlaylistRequest {
    string playlistID = 1;
}

message RemoveFromPlaylistRequest {
    string playlistItemID = 1;
}

message GetPlaylistRequest {
    string playlistID = 1;
    string userToken = 2;
}

message GetPlaylistResponse {
    string name = 1;
    string ownerID = 2;
    uint64 createdAtTimestamp = 3;
    uint64 updatedAtTimestamp = 4;
    repeated PlaylistItem playlistItems = 5;
}

message GetUserPlaylistsRequest {

}

message GetUserPlaylistsResponse {
    repeated Playlist playlists = 1;
}

message Playlist {
    string playlistID = 1;
    string name = 2;
    string ownerID = 3;
    uint64 createdAtTimestamp = 4;
    uint64 updatedAtTimestamp = 5;
    repeated PlaylistItem playlistItems = 6;
}

message PlaylistItem {
    string playlistItemID = 1;
    string contentID = 2;
    uint64 createdAtTimestamp = 3;
}